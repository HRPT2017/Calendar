// <auto-generated />
using System;
using Calendar.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Calendar.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250211141730_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Calendar.Models.Competition", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("badge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modalityId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("modalityId");

                    b.ToTable("Competition");
                });

            modelBuilder.Entity("Calendar.Models.Event", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("modalityId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("modalityId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Calendar.Models.EventCompetition", b =>
                {
                    b.Property<int>("competitionId")
                        .HasColumnType("int");

                    b.Property<int>("eventId")
                        .HasColumnType("int");

                    b.HasKey("competitionId", "eventId");

                    b.HasIndex("eventId");

                    b.ToTable("EventCompetition");
                });

            modelBuilder.Entity("Calendar.Models.Modality", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Modality");
                });

            modelBuilder.Entity("Calendar.Models.Competition", b =>
                {
                    b.HasOne("Calendar.Models.Modality", "modality")
                        .WithMany("competition")
                        .HasForeignKey("modalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("modality");
                });

            modelBuilder.Entity("Calendar.Models.Event", b =>
                {
                    b.HasOne("Calendar.Models.Modality", "modality")
                        .WithMany("events")
                        .HasForeignKey("modalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("modality");
                });

            modelBuilder.Entity("Calendar.Models.EventCompetition", b =>
                {
                    b.HasOne("Calendar.Models.Competition", "competition")
                        .WithMany("eventCompetition")
                        .HasForeignKey("competitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calendar.Models.Event", "events")
                        .WithMany("eventConpetition")
                        .HasForeignKey("eventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("competition");

                    b.Navigation("events");
                });

            modelBuilder.Entity("Calendar.Models.Competition", b =>
                {
                    b.Navigation("eventCompetition");
                });

            modelBuilder.Entity("Calendar.Models.Event", b =>
                {
                    b.Navigation("eventConpetition");
                });

            modelBuilder.Entity("Calendar.Models.Modality", b =>
                {
                    b.Navigation("competition");

                    b.Navigation("events");
                });
#pragma warning restore 612, 618
        }
    }
}
